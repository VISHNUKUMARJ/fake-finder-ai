
import { useState, useEffect } from "react";
import { AppLayout } from "@/components/layout/AppLayout";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileUploader } from "@/components/detection/FileUploader";
import { AnalysisProgress } from "@/components/detection/AnalysisProgress";
import { ResultAlert } from "@/components/detection/ResultAlert";
import { ResultExplanation } from "@/components/detection/ResultExplanation";
import { useImageAnalysis } from "@/hooks/useImageAnalysis";
import { imageDetectionMethods } from "@/components/detection/image/ImageDetectionMethods";
import { DetectionModeSelector } from "@/components/detection/DetectionModeSelector";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/components/ui/use-toast";
import { X } from "lucide-react";

const ImageDetection = () => {
  const [file, setFile] = useState<File | null>(null);
  const { toast } = useToast();
  const {
    isAnalyzing,
    progress,
    activeMethod,
    setActiveMethod,
    methodResults,
    result,
    handleAnalyze,
    resetAnalysis
  } = useImageAnalysis(file);

  // Function to save detection results to history
  const saveToHistory = async (result: any) => {
    if (!file || !result) return;
    
    try {
      // Get current user
      const currentUserStr = localStorage.getItem("fakefinder_user");
      if (!currentUserStr) return;
      
      const currentUser = JSON.parse(currentUserStr);
      
      // Create search history entry
      await supabase.from('search_history').insert({
        user_id: currentUser.id,
        filename: file.name,
        type: 'image',
        result: result.fake,
        confidence_score: result.confidence || 0.5
      });
    } catch (error) {
      console.error("Error saving to history:", error);
    }
  };

  // Save results when analysis is complete
  useEffect(() => {
    if (result && file) {
      saveToHistory(result);
    }
  }, [result, file]);

  const handleFileSelected = (selectedFile: File) => {
    setFile(selectedFile);
  };

  const handleClear = () => {
    setFile(null);
    resetAnalysis();
    toast({
      title: "Cleared",
      description: "Analysis and uploaded image have been cleared.",
    });
  };

  const explanationMethods = imageDetectionMethods.map(method => ({
    name: method.name,
    description: method.description || ""
  }));

  return (
    <AppLayout>
      <div className="container max-w-6xl py-6 space-y-8">
        <div className="flex flex-col items-center space-y-2 text-center">
          <h1 className="text-3xl font-bold">Image Detection</h1>
          <p className="text-muted-foreground max-w-[700px]">
            Upload an image to detect if it has been manipulated or generated by AI
          </p>
        </div>

        <DetectionModeSelector type="image" />
        
        <Card>
          <CardContent className="pt-6">
            <FileUploader
              onFileSelected={handleFileSelected}
              accept="image/*"
              maxSizeMB={5}
              file={file}
            />
            
            {file && !isAnalyzing && !result && (
              <div className="mt-6 flex justify-center gap-4">
                <Button onClick={handleAnalyze} className="px-8">
                  Analyze Image
                </Button>
                <Button variant="clear" onClick={handleClear}>
                  <X className="mr-1" />
                  Clear
                </Button>
              </div>
            )}
            
            {isAnalyzing && (
              <AnalysisProgress
                progress={progress}
                activeMethod={activeMethod}
                methodResults={methodResults}
                methods={imageDetectionMethods}
              />
            )}
            
            {result && (
              <div className="mt-6 flex justify-center">
                <Button variant="clear" onClick={handleClear}>
                  <X className="mr-1" />
                  Clear Results
                </Button>
              </div>
            )}
            
            <ResultAlert result={result} color="red" />
            
            {result && (
              <ResultExplanation 
                title="Understanding Results" 
                methods={explanationMethods} 
              />
            )}
          </CardContent>
        </Card>
      </div>
    </AppLayout>
  );
};

export default ImageDetection;
