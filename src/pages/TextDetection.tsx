
import { useState } from "react";
import { AppLayout } from "@/components/layout/AppLayout";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { AnalysisProgress } from "@/components/detection/AnalysisProgress";
import { ResultAlert } from "@/components/detection/ResultAlert";
import { ResultExplanation } from "@/components/detection/ResultExplanation";
import { TextScoreDisplay } from "@/components/detection/text/TextScoreDisplay";
import { useTextAnalysis } from "@/hooks/useTextAnalysis";
import { textDetectionMethods } from "@/components/detection/text/TextDetectionMethods";
import { DetectionModeSelector } from "@/components/detection/DetectionModeSelector";
import { useToast } from "@/components/ui/use-toast";
import { X } from "lucide-react";

const TextDetection = () => {
  const [text, setText] = useState("");
  const { toast } = useToast();
  const {
    isAnalyzing,
    progress,
    activeMethod,
    methodResults,
    featureScores,
    result,
    handleAnalyze
  } = useTextAnalysis(text);

  const handleClear = () => {
    setText("");
    if (result) {
      // Reload the page to reset analysis state
      window.location.reload();
    } else {
      toast({
        title: "Cleared",
        description: "Text has been cleared.",
      });
    }
  };

  const explanationMethods = textDetectionMethods.map(method => ({
    name: method.name,
    description: method.description || ""
  }));

  const renderTextResultAlert = () => {
    if (!result) return null;
    
    const { isManipulated, confidenceScore, humanScore, detailsText } = result;
    
    const baseAlertProps = {
      result: {
        isManipulated,
        confidenceScore,
        detailsText
      }
    };
    
    if (isManipulated) {
      return (
        <div className="mt-6">
          <ResultAlert {...baseAlertProps} color="orange" />
          <div className="mt-4 p-4 border border-orange-200 rounded-lg bg-orange-50 dark:bg-orange-950/20">
            <TextScoreDisplay 
              confidenceScore={confidenceScore} 
              humanScore={humanScore} 
              featureScores={featureScores} 
            />
          </div>
        </div>
      );
    }
    
    return (
      <div className="mt-6">
        <ResultAlert {...baseAlertProps} />
        <div className="mt-4 p-4 border border-green-200 rounded-lg bg-green-50 dark:bg-green-950/20">
          <TextScoreDisplay 
            confidenceScore={confidenceScore} 
            humanScore={humanScore} 
            featureScores={featureScores} 
          />
        </div>
      </div>
    );
  };

  return (
    <AppLayout>
      <div className="container max-w-6xl py-6 space-y-8">
        <div className="flex flex-col items-center space-y-2 text-center">
          <h1 className="text-3xl font-bold">Text Detection</h1>
          <p className="text-muted-foreground max-w-[700px]">
            Input text to detect if it was generated by AI
          </p>
        </div>

        <DetectionModeSelector type="text" />
        
        <Card>
          <CardContent className="pt-6">
            <Textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Paste text here for analysis (minimum 100 characters for accurate results)"
              className="min-h-[200px] resize-y"
            />
            
            {text.length < 100 && text.length > 0 && (
              <p className="mt-2 text-sm text-orange-500">
                For accurate results, please enter at least 100 characters.
              </p>
            )}
            
            <div className="mt-6 flex justify-center gap-4">
              <Button 
                onClick={handleAnalyze} 
                className="px-8"
                disabled={isAnalyzing || text.length < 100}
              >
                {isAnalyzing ? "Analyzing..." : "Analyze Text"}
              </Button>
              
              {text.length > 0 && (
                <Button variant="clear" onClick={handleClear} disabled={isAnalyzing}>
                  <X className="mr-1" />
                  Clear
                </Button>
              )}
            </div>
            
            {isAnalyzing && (
              <AnalysisProgress
                progress={progress}
                activeMethod={activeMethod}
                methodResults={methodResults}
                methods={textDetectionMethods}
              />
            )}
            
            {renderTextResultAlert()}
            
            {result && (
              <div>
                <div className="mt-6 flex justify-center">
                  <Button variant="clear" onClick={handleClear}>
                    <X className="mr-1" />
                    Clear Results
                  </Button>
                </div>
                <ResultExplanation 
                  title="Understanding Text Analysis" 
                  methods={explanationMethods} 
                />
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </AppLayout>
  );
};

export default TextDetection;
